name: Auto Merge Branch A to B

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch (e.g., Branch A)'
        required: true
        default: 'genx'
      target_branch:
        description: 'Target branch (e.g., Branch B)'
        required: true
        default: 'geny'
      Deployto:
        type: environment
        description: 'Environment to deploy to (dev or qa)'
        required: true
        default: 'dev'

permissions:
  contents: write
  pull-requests: write
env:
  FEATURE_BRANCH: feature-genx-geny-merge1
  GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
jobs:
  create-feature-branch-from-master:
      if: inputs.Deployto == 'dev'
      name: Create Feature Branch from GenY master
      runs-on: ubuntu-latest

      steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
         token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if feature branch already exists
        id: check_branch
        run: |
         if git ls-remote --exit-code --heads origin $FEATURE_BRANCH; then
          echo "Branch already exists. Skipping creation."
          echo "exists=true" >> $GITHUB_OUTPUT
         else
          echo "Branch does not exist. Will create."
          echo "exists=false" >> $GITHUB_OUTPUT
         fi

      - name: Checkout target branch
        if: steps.check_branch.outputs.exists == 'false'
        uses: actions/checkout@v4
        with:
         ref: ${{ github.event.inputs.target_branch }}
         token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        if: steps.check_branch.outputs.exists == 'false'
        run: |
         git config user.name "github-actions"
         git config user.email "github-actions@github.com"

      - name: Create and push feature branch
        if: steps.check_branch.outputs.exists == 'false'
        run: |
         git checkout -b $FEATURE_BRANCH
         git push origin $FEATURE_BRANCH

  create-pull-request:
   needs: create-feature-branch-from-master
   if: inputs.Deployto == 'dev' || inputs.Deployto == 'QA' 
   name: Create PR from source → feature
   runs-on: ubuntu-latest
   outputs:
     pr_number: ${{ steps.save_pr.outputs.pr_number }}
   steps:
    - name: checkout source branch
      uses: actions/checkout@v4
      with:
        ref : ${{ github.event.inputs.source_branch }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Pull Request
      id: create_pr
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        base: ${{ env.FEATURE_BRANCH }}
        title: "PR: Merge '${{ github.event.inputs.source_branch }}' into '${{ env.FEATURE_BRANCH }}'"
        body: |
          Merging source branch into feature branch based on target `${{ github.event.inputs.target_branch }}`.

    - name: Save PR number
      id: save_pr
      run: echo "::set-output name=pr_number::${{ steps.create_pr.outputs.pull-request-number }}" 
      
  merge:
    if: ${{ (inputs.Deployto == 'QA' || inputs.Deployto == 'dev' ) }}
    runs-on: ubuntu-latest
    needs: create-pull-request
    steps:
    - name: Checkout target branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch }}
        fetch-depth: 0  # Fetch full history for merging

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Add source branch
      run: |
        git fetch origin ${{ github.event.inputs.source_branch }}:${{ github.event.inputs.source_branch }}

    - name: Merge source branch into target branch
      id: merge
      run: |
        set -e
        git merge origin/${{ github.event.inputs.source_branch }} --no-ff || echo "::set-output name=conflict::true"

    - name: Check for merge conflict
      if: steps.merge.outputs.conflict == 'true'
      run: |
        echo "⚠️ Merge conflict detected. Please resolve manually."
        exit 1

    - name: Push merged changes
      if: steps.merge.outputs.conflict != 'true'
      run: |
        git push origin ${{ github.event.inputs.target_branch }}
        echo "✅ Merge completed successfully."
  Approve_code_review:
    runs-on: ubuntu-latest
    needs: merge
    environment:
          name: ${{ inputs.Deployto }}
         # url: https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}
    steps:
      - run: echo "Have you reviwed the code and ready to deploy?"

  approval-2:
    name: Approval 2 - Merge Source into Feature
    needs: Approve_code_review
    runs-on: ubuntu-latest
    environment:
      name: merge-approval
      #url: https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}
    steps:
      - run: echo "Awaiting final approval to merge source → feature branch."
