name: Conditional Merge Workflow

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Branch to merge from (e.g., feature/login)'
        required: true
      target_branch:
        description: 'Branch to merge into (e.g., main or develop)'
        required: true
      Deployto:
        description: 'Environment to deploy to (dev or qa)'
        required: true
        default: 'dev'

permissions:
  contents: write
  pull-requests: write

env:
  FEATURE_BRANCH: feature-geny_${{ github.run_id }}

jobs:
  create-feature-branch-and-dev-pr:
    if: inputs.Deployto == 'dev'
    name: Setup Feature Branch and PR (Dev)
    runs-on: ubuntu-latest

    steps:
      - name: Check if feature branch already exists
        id: check_branch
        run: |
          if git ls-remote --exit-code --heads origin $FEATURE_BRANCH; then
            echo "Branch already exists. Skipping creation."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Branch does not exist. Will create."
            echo "EXISTS=false" >> $GITHUB_ENV

      - name: Checkout target branch
        if: env.EXISTS == 'false'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        if: env.EXISTS == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Create and push feature branch
        if: env.EXISTS == 'false'
        run: |
          git checkout -b $FEATURE_BRANCH
          git push origin $FEATURE_BRANCH

      - name: Create PR from source → feature
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ env.FEATURE_BRANCH }}
          head: ${{ github.event.inputs.source_branch }}
          title: "PR: Merge '${{ github.event.inputs.source_branch }}' into '${{ env.FEATURE_BRANCH }}'"
          body: |
            Merging source branch into feature branch based on target `${{ github.event.inputs.target_branch }}`.

      - name: Save PR number
        run: echo "PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_ENV

  check-mergeability-dev:
    if: inputs.Deployto == 'dev'
    name: Check Merge Conflicts (Dev)
    needs: create-feature-branch-and-dev-pr
    runs-on: ubuntu-latest

    steps:
      - name: Check PR mergeability
        id: check_merge
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail on conflict
        run: |
          echo "Mergeable: ${{ steps.check_merge.outputs.data__mergeable }}"
          if [[ "${{ steps.check_merge.outputs.data__mergeable }}" != "true" ]]; then
            echo "❌ Merge conflict detected. Please resolve manually."
            exit 1
          fi

  approval-dev-1:
    if: inputs.Deployto == 'dev'
    name: Approval 1 - Code Review
    needs: check-mergeability-dev
    runs-on: ubuntu-latest
    environment:
      name: review-approval
      url: https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}

    steps:
      - run: echo "Awaiting approval: code review."

  approval-dev-2:
    if: inputs.Deployto == 'dev'
    name: Approval 2 - Merge Source into Feature
    needs: approval-dev-1
    runs-on: ubuntu-latest
    environment:
      name: merge-approval
      url: https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}

    steps:
      - run: echo "Awaiting final approval to merge source → feature branch."

  merge-dev-pr:
    if: inputs.Deployto == 'dev'
    name: Merge Source → Feature Branch
    needs: approval-dev-2
    runs-on: ubuntu-latest

    steps:
      - name: Merge the PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = process.env.PR_NUMBER;
            const result = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: "merge"
            });
            console.log("✅ Merged source → feature:", result.data.merged);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}

  create-qa-pr-and-merge:
    if: inputs.Deployto == 'qa'
    name: Merge Feature Branch → Target Branch (QA)
    runs-on: ubuntu-latest

    steps:
      - name: Create PR from feature → target
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ github.event.inputs.target_branch }}
          head: feature-geny_${{ github.run_id }}
          title: "PR: Merge feature-geny_${{ github.run_id }} into ${{ github.event.inputs.target_branch }}"
          body: |
            QA deploy: Merging feature branch into target branch.

      - name: Save QA PR number
        run: echo "PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_ENV

  approval-qa-1:
    if: inputs.Deployto == 'qa'
    name: Approval 1 - QA Review
    needs: create-qa-pr-and-merge
    runs-on: ubuntu-latest
    environment:
      name: review-approval
      url: https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}

    steps:
      - run: echo "Awaiting approval for QA review."

  approval-qa-2:
    if: inputs.Deployto == 'qa'
    name: Approval 2 - Final Merge to Target
    needs: approval-qa-1
    runs-on: ubuntu-latest
    environment:
      name: merge-approval
      url: https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}

    steps:
      - run: echo "Awaiting final approval to merge feature → target."

  merge-qa-pr:
    if: inputs.Deployto == 'qa'
    name: Merge Feature → Target Branch
    needs: approval-qa-2
    runs-on: ubuntu-latest

    steps:
      - name: Merge the QA PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = process.env.PR_NUMBER;
            const result = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: "merge"
            });
            console.log("✅ QA merged:", result.data.merged);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
